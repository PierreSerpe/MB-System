#!/usr/bin/env bash

#########################################
# Name: mkdoc-release.sh
#
# Summary: make documentation package
#
# Description: Build HTML and PDF doc from markdown
#
#  ./mkdoc/mkdoc-release.sh
#
# Author: kheadley
#
# Copyright 2020 MBARI
#
#########################################
description="Generate mbtrn tools doc package"

# set package name (used to name output directory)
PKG_NAME="mbtrn"
VERBOSE="N"
TARGZ="N"
# set session ID and other common environment used by all doc
export MKDOC_SESSION=${PKG_REL_DATE:-$(date +%y%m%d-%H%M%S)}
MKDOC_HOME_DFL=$(cd "$(dirname ${0})" && pwd)
MKDOC_HOME=${MKDOC_HOME:-${MKDOC_HOME_DFL}}
SRC_DIR=$(cd "$(dirname ${MKDOC_HOME})" && $(cd "..") && pwd)
PKG_NAME=${PKG_NAME:-"pkg"}
PANDOC=$(which pandoc)
HTMLTOPDF=$(which wkhtmltopdf)
GS=$(which gs)
export MKDOC_OPATH=${PKG_REL_DOC:-"${PKG_NAME}-doc-${MKDOC_SESSION}"}
CONTENTS_NAME="CONTENTS"
CMD_LINE="${0##*./} $*"


########################################
# name: vout
# description: print verbose message to stderr
# args:
#     msg: message
########################################
vout(){
if [ "${VERBOSE}" == "Y" ] || [ "${VERBOSE}" == "TRUE" ]
then
	echo "$1" >&2
fi
}

#################################
# name: printUsage
# description: print use message
# args: none
#################################
printUsage(){
    echo
    echo " Description: $description"
    echo
    echo " usage: `basename $0` [options]"
    echo " Options:"
    echo "  -h    : print use message"
    echo "  -t    : create tar.gz   [${TGZ}]"
    echo "  -v    : verbose output  [${VERBOSE}]"
    echo ""
    echo " Examples:"
    echo "  src/mbtrn/tools/bin/mkdoc-release.sh -v"
    echo ""
    echo
}


########################################
# name: processCmdLine
# description: do command line processsing
# args:
#     args:       positional paramters
#     returnCode: none
########################################
processCmdLine(){
    OPTIND=1
    vout "`basename $0` all args[$*]"

while getopts htv Option
    do
        vout "processing $Option[$OPTARG]"
        case $Option in
            h) printUsage
                exit 0
            ;;
            t) TGZ="Y"
            ;;
            v) VERBOSE="Y"
            ;;
            *) exit 0 # getopts outputs error message
            ;;
        esac
        done
}

processCmdLine "$@"

vout ""
vout " CMD_LINE [${CMD_LINE}]"
if [ "${VERBOSE}" == "Y" ]
then
vout " env:"
env|grep -e MKDOC -e PKG_
fi

ORIG_PWD=`pwd`

# generate doc sets
# see mkdoc.sh for use notes (e.g. style selection, PDF/text assets)
${MKDOC_HOME}/mkdoc.sh $OPT_V -i ${SRC_DIR}/README-test.md
${MKDOC_HOME}/mkdoc.sh $OPT_V -i ${SRC_DIR}/README-tools.md
${MKDOC_HOME}/mkdoc.sh $OPT_V -i ${SRC_DIR}/mbtrnpp-plot/README-mbtrn-plot-dev.md
${MKDOC_HOME}/mkdoc.sh $OPT_V -i ${SRC_DIR}/mbtrnpp-plot/README-mbtrn-plot-use.md
${MKDOC_HOME}/mkdoc.sh $OPT_V -i ${SRC_DIR}/mbtrncfg/README-mbtrncfg.md
${MKDOC_HOME}/mkdoc.sh $OPT_V -i ${SRC_DIR}/cfg/README-mbtrnpp.md
${MKDOC_HOME}/mkdoc.sh $OPT_V -i ${SRC_DIR}/bin/README-bin.md

if [ -d "${MKDOC_OPATH}" ]
then

# generate README markdown source
cat << END_README > ${MKDOC_OPATH}/${CONTENTS_NAME}.md
## mbtrn Tools README files
#### Package Contents
#### auto-generated by $(basename $0) $(date +%y-%m-%dT%H:%M:%S)

|Package Files         |                         |
|----------------------|-------------------------|
|README-test           |TRN testing              |
|README-mbtrnpp        |mbtrnpp use notes        |
|README-mbtrncfg       |mbtrnpp web config tool  |
|README-mbtrn-plot-dev |TRN plot developers guide|
|README-mbtrn-plot-use |TRN plot users guide     |
|README-bin            |mbtrn util scripts       |
|README-tools          |tools directory contents |

|Directories           |                         |
|----------------------|-------------------------|
|html                  |HTML format              |
|pdf                   |PDF format               |
|styles                |CSS styles               |

END_README

# generate README PDF (md > html > pdf)
cp ${MKDOC_HOME}/styles/radar.css ${MKDOC_OPATH}/styles/.
cd ${MKDOC_OPATH}
${PANDOC} -s -c styles/radar.css  ${CONTENTS_NAME}.md --metadata title="Documentation Package Contents" -o ${CONTENTS_NAME}.html
${HTMLTOPDF} -s Letter --margin-bottom 25mm --margin-top 25mm --margin-left 20mm --margin-right 20mm --enable-local-file-access ${CONTENTS_NAME}.html ${CONTENTS_NAME}.pdf
rm ${CONTENTS_NAME}.html

if [ "${TGZ}" == "Y" ]
then
cd ${ORIG_PWD}
DISABLE_COPYFILE=1 tar czvf ${MKDOC_OPATH}.tar.gz ${MKDOC_OPATH}
fi

fi
