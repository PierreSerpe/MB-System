import QtQuick 2.9
import Qt.labs.platform 1.1
import QtQuick.Controls 2.3
import QtQuick.Dialogs 1.1
import QtDataVisualization 1.2
import QVtk 1.0
import SharedConstants 1.0
import "ui-components"


/* ***
Displays bathymetry/topography in a QVtkItem 
Mouse controls:
TBD

BackEnd singleton must be registered in root context by main.cpp
See https://qml.guide/singletons/
*** */


ApplicationWindow {
    id: mainWindow
    objectName: "mainWindow"
    visible: true
    width: 1000
    height: 880
    title: "qt-mbgrdviz"

    Action {
       id: testAction
       text: qsTr("My test action")
     }
    
    /* Define signal generated by this QML with the sig() function.
       The signal msg consists of integer code (or enum value), followed by
       a string value. E.g. when the "Show axes" menu item is clicked the QML
       emits a signal consisting of Const.Cmd.ShowAxes and "true" or "false",
       depending on the new state of the menu item.
    */

    // Signal payload consists of parameter code and associated value
    signal sig(int param, string value)

    // Constants shared with C++
    Const {
       id: constants
    }


    QVtkItem {
      id: qVtkTest
    }


    //// TEST TEST TEST
    /// property int editState: QVtkItem.EditState.EditOverlay
    property int editState: qVtkItem.editState
    property string testString: constants.testString
    property int siteFile: Const.Cmd.SiteFile
    property variant cmaps: constants.cmaps
    
    Component.onCompleted: {console.log("onCompleted");
                            console.log("*** editState: ", editState);
			    console.log("testString: ", testString);
			    console.log("siteFile: ", siteFile);
			    console.log("cmaps: ", cmaps);
			    console.log("cmaps[2]: ", cmaps[2]);
			    console.log("qVtkItem.testInt: ", qVtkItem.testInt);
			    qVtkItem.testInt = 111;
			    }

    property int selectedAxisLabel: -1
    property real dragSpeedModifier: 100.0
    property int currentMouseX: -1
    property int currentMouseY: -1
    property int previousMouseX: -1
    property int previousMouseY: -1

    Settings2dWindow {
        id: settings2d
        visible: false
    }


    Settings3dWindow {
        id: settings3d
        visible: false
    }


    ActionGroup {
        id: mapActions
        exclusive: true
    }

    ActionGroup {
        id: overlayActions
        exclusive: false
    }

    ActionGroup {
        id: topoActions
        exclusive: true
    }

    ActionGroup {
        id: shadeActions
        exclusive: true
    }

    ActionGroup {
        id: projectionActions
        exclusive: true
    }

    ActionGroup {
        id: navActions
        exclusive: true
    }

    ActionGroup {
        id: colorActions
        exclusive: true
    }

    ActionGroup {
        id: mouseActions
        exclusive: true
    }

    menuBar: MenuBar {
    
        Menu {
            title: qsTr("File")

            Menu {
                title: qsTr("Open")
            Action { text: qsTr("Open grid...") ;
                onTriggered: { console.log("show file dialog")
                    gridfileDialog.open()}
            }
            Action { text: qsTr("Open site...") ;
                onTriggered: { console.log("open site")
                sitefileDialog.open()}
            }
            Action { text: qsTr("Open route...") ;
                onTriggered: { console.log("open route")
		routefileDialog.open()
                }
            }
            Action { text: qsTr("Open navigation...") ;
                onTriggered: { console.log("open navigation")
                }                }
                

            }
            Menu {
                title: qsTr("Save")
                Action { text: qsTr("Sites") }
                Action { text: qsTr("Routes") }
                Action { text: qsTr("Navigation") }                
                }
            Action { text: qsTr("Exit") ;
                onTriggered: { console.log("exit");
                    quitDialog.open()
                }
            }
        }

        Menu {
	    title: qsTr("&Edit")
            Action { text: qsTr("Edit site points") ;
                onTriggered: { console.log("edit site points")
                    editSiteDialog.open()}
	    }
            Action { text: qsTr("Edit route") ;
                onTriggered: { console.log("edit route")
                    editRouteDialog.open();
		    console.log("qVtkItem.testInt: ", qVtkItem.testInt)
		    qVtkTest.editState = QVtkItem.EditState.EditRoute
		    var i = QVtkItem.EditState.EditRoute;
		    console.log("new editState: ", i)
		    }
            }	    
            Action {text: qsTr("Navigation list")}
        }
        
        Menu {
            title: qsTr("&View")
            Action { checkable: true; text: qsTr("&2D only") }            
            MenuSeparator {}
            Menu {
                title: "Color map"
		id: colorTableMenu
		
		// Create and add Actions to menu
	     	Component.onCompleted: {
	       	// Insert menu items here, with number of items and
	       	// item names as specified in the cmaps[] array that was
	       	// retrieved from C++
	       	var cmd = Const.ColorMap;
	       	for (var i = 0; i < cmaps.length; i++)  {
	       	    console.log("map: ", cmaps[i]);
		    // Build QML string that specifies menu Action to insert
		    var qmlStr = "import QtQuick.Controls 2.3; " + 
		    	"Action {id: myAction; checkable: true; ";
		   
		    // First item is checked
		    if (i == 0) { qmlStr += "checked: true; "; }

		    qmlStr += "ActionGroup.group: colorActions; ";
		    qmlStr += "text: \"" + cmaps[i] + "\"; ";
		    qmlStr += "onTriggered: {mainWindow.sig(" + cmd +  ", " +
		   	  "\"" + cmaps[i] + "\")}}";

		    console.log("qmlStr: " , qmlStr);
		   
		    // Create the menu Action
		    var obj =
		    	Qt.createQmlObject(qmlStr,
                      	colorTableMenu,
                      	"dynamicAction");
		      
                    // Add created Action to the menu    
		    colorTableMenu.addAction(obj);

	       	  }
		
            }
	    }
            MenuSeparator {}
            Menu {
                title: "Overlays"
                Action { checkable: true; checked: true; text: qsTr("&Sites"); ActionGroup.group: overlayActions }
                Action { checkable: true; text: qsTr("&Routes"); ActionGroup.group: overlayActions }

                Action { checkable: true; text: qsTr("&Contours"); ActionGroup.group: overlayActions }
                Action { checkable: true; text: qsTr("&Vector"); ActionGroup.group: overlayActions }                
                
            Action { checkable: true; text: qsTr("&Axes");
              ActionGroup.group: overlayActions;
	      onTriggered: { console.log("axes triggered: ", checked);
              mainWindow.sig(Const.Cmd.ShowAxes, checked)	      
              }}
              
              //  Action { checkable: true; checked: true;
              //  text: qsTr("&Navigation"); ActionGroup.group: overlayActions }
            Menu {
                title: "Navigation"
                Action {checkable: true; checked: true; text: qsTr("Off"); ActionGroup.group: navActions }
                Action {checkable: true; text: qsTr("Draped"); ActionGroup.group: navActions}
                Action {checkable: true; text: qsTr("Non-draped"); ActionGroup.group: navActions }
            }
            MenuSeparator {}
                
            }

            MenuSeparator {}
            Menu {
                title: "Projection"
                Action {checkable: true; checked: true; text: qsTr("Auto"); ActionGroup.group: projectionActions }                
                Action {checkable: true; checked: true; text: qsTr("Geographic"); ActionGroup.group: projectionActions }
                Action {checkable: true; text: qsTr("UTM"); ActionGroup.group: projectionActions}
                Action {checkable: true; text: qsTr("Spheroid"); ActionGroup.group: projectionActions }
            }            
            

            MenuSeparator {}
            Menu {
                title: "Shading"
                Action {checkable: true; checked: true; text: qsTr("Off"); ActionGroup.group: shadeActions }
                Action {checkable: true; text: qsTr("Slope"); ActionGroup.group: shadeActions}
                Action {checkable: true; text: qsTr("Illumination"); ActionGroup.group: shadeActions }
                Action {text: qsTr("Settings...")}                
            }
            MenuSeparator {}
            Action {text: qsTr("Camera/model..."); onTriggered: {
                    console.log("show 3d settings window");
                    settings3d.show()
                }
            }
            Action {text: qsTr("2D..."); onTriggered: {
                    console.log("show 2d settings window");
                    settings2d.show()
                }
            }
            
            Action {text: qsTr("Lighting...")}            
            Action {text: qsTr("Resolution...")}
            Action { checkable: true; text: qsTr("Histograms") }
            Action { checkable: true; text: qsTr("Profile")
            }
            
        }

        Menu {
            title: "&Mouse"
            Action {checkable: true; checked: true; text: qsTr("Pan and zoom"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Rotate model"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Rotate view"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Shading"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Pick area"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Edit sites"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Edit routes"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Pick nav"); ActionGroup.group: mouseActions }
            Action {checkable: true; text: qsTr("Pick nav file"); ActionGroup.group: mouseActions }
        }

        Menu {
            title: "Help"
            Action {text: qsTr("About"); onTriggered: {
                    console.log("show version info");
                    myMessageDialog.text = qsTr("PROTOTYPE");
                    myMessageDialog.open()
                }

            }
        }

    }

    FileDialog {
        id: gridfileDialog
        title: "Open grid/swath file"
        nameFilters: ["Grid/swath files (*.grd *.mb?*)"]
        onAccepted: {
            console.log("accepted " + fileUrl);
            BackEnd.setGridFile(fileUrl);
	    console.log("cmaps: " + BackEnd.getColorMapsList());
        }
    }

    FileDialog {
        id: routefileDialog
        title: "Open route file"
        nameFilters: ["Route files (*.rte)"]
        onAccepted: {
            console.log("accepted " + fileUrl);
            mainWindow.sig(Const.Cmd.RouteFile, fileUrl) 	    	    
        }
    }

    FileDialog {
        id: sitefileDialog
        title: "Open site file"
        nameFilters: ["Site files (*.ste)"]
        onAccepted: {
            console.log("accepted " + fileUrl);
            mainWindow.sig(Const.Cmd.SiteFile, fileUrl)            	    
        }
    }

    Item {
        id: item1
        anchors.fill: parent


        Text {
            id: selectedFile
            objectName: "selectedFile"
            text: "filename goes here"
            anchors.top: parent.top
            anchors.topMargin: 0
            font.family: "courier"
            font.pointSize: 18
            color: "black"
        }

        Text {
            id: pickedCoords
            objectName: "pickedCoords"
            text: "picked coords go here"
            anchors.top: selectedFile.bottom
            anchors.topMargin: 5
            font.family: "courier"
            font.pointSize: 18
            color: "black"
        }
        
        BusyIndicator {
            id: busyIndicator
            objectName: "busyIndicator"
            anchors.bottom: parent.bottom
        }

        Item {
            width: 964
            height: 964
            anchors.bottom: parent.bottom
            anchors.bottomMargin: 0
            anchors.top: selectedFile.bottom
            anchors.topMargin: 36            
            objectName: "surface3DItem"

	    
            /// Surface rendering here
            QVtkItem {
                id: qVtkItem
                objectName: "qVtkItem"
                anchors.fill: parent
                width: 1000
                height: 1000

                // Update picked coordinate text
                onPickedPointChanged: {
                  pickedCoords.text = pickedPoint
                }

                // Update busy status
                onBusyChanged: {
                  console.log("busy state changed to " + busy)
                  busyIndicator.running = busy
                }
            }           
        }
    }


    MessageDialog {
        id: quitDialog
        title: "Quit?"
        icon: StandardIcon.Question
        text: "Quit application?"
        standardButtons: StandardButton.Yes |
                         StandardButton.No
        Component.onCompleted: visible = false
        onYes: Qt.quit(0)
        onNo: console.log("did not quit")
    }

    MessageDialog {
        id: myMessageDialog
        objectName: "myMessageDialog"
        title: "my message dialog"
        text: "this is default text"
        Component.onCompleted: visible = false
    }

    MessageDialog {
        id: editRouteDialog
        objectName: "editRouteDialog"
	modality: Qt.NonModal
        title: "Edit route"
        text: "Editing route..."
	standardButtons: StandardButton.Apply | StandardButton.Cancel

        Component.onCompleted: visible = false
    }

    MessageDialog {
        id: editSiteDialog
        objectName: "editSiteDialog"
	modality: Qt.NonModal
        title: "Editing site points"
        text: "Editing site points..."
	standardButtons: StandardButton.Apply | StandardButton.Cancel

        Component.onCompleted: visible = false
    }


    SystemTrayIcon {
        visible: true
        // icon.source: "qrc:mbsystem_logo.gif"

        onActivated: {
            window.show()
            window.raise()
            window.requestActivate()
        }
    }
        Menu {
            MenuItem {
                text: qsTr("Open up!")
                onTriggered: {
                    app.showNormal()
                }
            }
            MenuItem {
                text: qsTr("Quit right now")
                onTriggered: Qt.quit()
            }
        }

}




